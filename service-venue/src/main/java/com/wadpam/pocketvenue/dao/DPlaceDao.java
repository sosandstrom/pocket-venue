package com.wadpam.pocketvenue.dao;

import com.google.appengine.api.datastore.Key;
import com.wadpam.pocketvenue.domain.DPlace;

import java.util.Collection;

/**
 * Business Methods interface for entity DPlace.
 * This interface is generated by mardao, but edited by developers.
 * It is not overwritten by the generator once it exists.
 *
 * Generated on 2012-09-02T11:34:32.312+0700.
 * @author mardao DAO generator (net.sf.mardao.plugin.ProcessDomainMojo)
 */
public interface DPlaceDao extends GeneratedDPlaceDao<Key, Key> {

    /**
     * Persist a place and also update the index to allow future searched.
     * @param dPlace The place that should be persisted
     * @return The unique id of the place
     */
    public Long persistAndIndex(DPlace dPlace);

    /**
     * Delete a place and also update the index.
     * @param dPlace The place that should be deleted
     */
    public void deleteAndUpdateIndex(DPlace dPlace);

    /**
     * Search for a place based on a text string.
     * @param text the search text
     * @return a list of matching places
     */
    public Collection<DPlace> searchInIndexForPlaces(String text);

    /**
     * Get all places.
     * @param cursor The cursor returned from the previous call to this method. If this is the first call, use null.
     * @param pageSize The number of places to return
     * @param result An empty collection of places that will be populated with the results
     * @return a new cursor that can be used to get the next products.
     */
    public String getPlaces(String cursor, int pageSize, Collection<DPlace> result);

    /**
     * Get all places for a parent.
     * @param cursor The cursor returned from the previous call to this method. If this is the first call, use null.
     * @param pageSize The number of places to return
     * @param parentId Optional. The parent it. If specified, only places with this parent id will be returned.
     * @param result An empty collection of places that will be populated with the results
     * @return a new cursor that can be used to get the next products.
     */
    public String getPlacesForParent(String cursor, int pageSize, Long parentId, Collection<DPlace> result);

    /**
     * Get all places for a hierarchy.
     * @param cursor The cursor returned from the previous call to this method. If this is the first call, use null.
     * @param pageSize The number of places to return
     * @param hierarchy the hierarchy to iterate over
     * @param result An empty collection of places that will be populated with the results
     * @return a new cursor that can be used to get the next products.
     */
    public String getPlacesForHierarchy(String cursor, int pageSize, String hierarchy, Collection<DPlace> result);

    /**
     * Get all places for tags.
     * Minimum a category or location tag must be provided
     * @param cursor The cursor returned from the previous call to this method. If this is the first call, use null.
     * @param pageSize The number of places to return
     * @param appTag1 the category tag id to match against
     * @param appTag2 the category tag id to match against
     * @param result An empty collection of places that will be populated with the results
     * @return a new cursor that can be used to get the next products.
     */
    public String getPlacesForTags(String cursor, int pageSize, Long appTag1, Long appTag2, Collection<DPlace> result);


    /**
     * Delete the tag id from all venues
     * @param tagId the tag id to delete
     */
    public void deleteTagId(Long tagId);

}
